import streamlit as st
import sqlite3
from deepai import DeepAI
from coinbase_commerce.client import Client
import requests
import os
import logging

# Initialize DeepAI API
deepai_api_key = st.secrets["deepai_api_key"]
deepai = DeepAI(api_key=deepai_api_key)

# Initialize Coinbase Commerce API
coinbase_api_key = st.secrets["coinbase_api_key"]
coinbase_client = Client(api_key=coinbase_api_key)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Database setup
conn = sqlite3.connect('app.db')
c = conn.cursor()

# Create necessary tables if not exist
def setup_db():
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    username TEXT PRIMARY KEY, 
                    password TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS urls (
                    id INTEGER PRIMARY KEY, 
                    user TEXT, 
                    url TEXT, 
                    description TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS posts (
                    id INTEGER PRIMARY KEY, 
                    user TEXT, 
                    content TEXT, 
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    c.execute('''CREATE TABLE IF NOT EXISTS subscriptions (
                    user TEXT PRIMARY KEY, 
                    subscription_id TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS shapes (
                    id INTEGER PRIMARY KEY, 
                    user_id TEXT, 
                    shape TEXT)''')
    conn.commit()

setup_db()

# User Authentication
def authenticate(username, password):
    try:
        c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        user = c.fetchone()
        if user:
            st.session_state['username'] = username
            return True
        else:
            return False
    except Exception as e:
        logger.error(f"Error authenticating user: {e}")
        return False

# Create user function
def create_user(username, password):
    try:
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
    except Exception as e:
        logger.error(f"Error creating user: {e}")

# Shape creation
def create_shape(shape_type, iterations):
    try:
        # Dummy implementation, replace with actual shape creation logic
        shapes = {
            "Flower of Life": "Creating Flower of Life with {} iterations.".format(iterations),
            "Metatron's Cube": "Creating Metatron's Cube with {} iterations.".format(iterations)
        }
        return shapes.get(shape_type, "Shape not found")
    except Exception as e:
        logger.error(f"Error creating shape: {e}")
        return "Error creating shape"

# Deep AI integration for error handling
def handle_error(error_message):
    try:
        response = deepai.standard_api_request('text-generator', {
            'text': error_message,
        })
        return response['output']
    except Exception as e:
        logger.error(f"Error using DeepAI for error handling: {e}")
        return "Error processing the error"

# URL backend management
def add_url(user, url, description):
    try:
        c.execute("INSERT INTO urls (user, url, description) VALUES (?, ?, ?)", (user, url, description))
        conn.commit()
    except Exception as e:
        logger.error(f"Error adding URL: {e}")

def get_user_urls(user):
    try:
        c.execute("SELECT url, description FROM urls WHERE user=?", (user,))
        return c.fetchall()
    except Exception as e:
        logger.error(f"Error fetching URLs: {e}")
        return []

# Social networking functions
def create_post(user, content):
    try:
        c.execute("INSERT INTO posts (user, content) VALUES (?, ?)", (user, content))
        conn.commit()
    except Exception as e:
        logger.error(f"Error creating post: {e}")

def get_all_posts():
    try:
        c.execute("SELECT user, content, timestamp FROM posts ORDER BY timestamp DESC")
        return c.fetchall()
    except Exception as e:
        logger.error(f"Error fetching posts: {e}")
        return []

# Coinbase subscription handling
def create_subscription(user):
    try:
        charge = coinbase_client.charge.create(
            name='Subscription',
            description='Monthly subscription',
            local_price={'amount': '10.00', 'currency': 'USD'},
            pricing_type='fixed_price',
        )
        subscription_id = charge['id']
        c.execute("INSERT INTO subscriptions (user, subscription_id) VALUES (?, ?)", (user, subscription_id))
        conn.commit()
        return charge['hosted_url']
    except Exception as e:
        logger.error(f"Error creating subscription: {e}")
        return None

def check_subscription(user):
    try:
        c.execute("SELECT subscription_id FROM subscriptions WHERE user=?", (user,))
        result = c.fetchone()
        if result:
            subscription_id = result[0]
            charge = coinbase_client.charge.retrieve(subscription_id)
            return charge['timeline'][-1]['status'] == 'COMPLETED'
        else:
            return False
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")

# Streamlit app layout and logic
st.title("URL PhatCraft Geometrical Nexus Networking")
menu = ["Home", "Login", "Sign Up", "Create Shape", "Manage URLs", "Social Network", "Subscription"]
choice = st.sidebar.selectbox("Menu", menu)

if choice == "Home":
    st.subheader("Welcome to the URL PhatCraft Geometrical Nexus Networking App")

elif choice == "Login":
    st.subheader("Login Section")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if authenticate(username, password):
            st.success(f"Logged In as {username}")
        else:
            st.error("Invalid Username or Password")

elif choice == "Sign Up":
    st.subheader("Create New Account")
    new_user = st.text_input("Username")
    new_password = st.text_input("Password", type="password")
    if st.button("Sign Up"):
        create_user(new_user, new_password)
        st.success("Account created successfully")

elif choice == "Create Shape":
    st.subheader("Create Sacred Geometry Shape")
    shape_type = st.selectbox("Select Shape", ["Flower of Life", "Metatron's Cube"])
    iterations = st.slider("Number of Iterations", 1, 33)
    if st.button("Create"):
        result = create_shape(shape_type, iterations)
        st.write(result)

elif choice == "Manage URLs":
    st.subheader("Manage Your URLs")
    if 'username' not in st.session_state:
        st.error("Please login to manage URLs")
    else:
        user = st.session_state['username']
        url = st.text_input("URL")
        description = st.text_area("Description")
        if st.button("Add URL"):
            add_url(user, url, description)
            st.success("URL added successfully")
        user_urls = get_user_urls(user)
        for u in user_urls:
            st.write(f"URL: {u[0]}")
            st.write(f"Description: {u[1]}")
            st.write("---")

elif choice == "Social Network":
    st.subheader("Social Network")
    if 'username' not in st.session_state:
        st.error("Please login to post")
    else:
        user = st.session_state['username']
        content = st.text_area("What's on your mind?")
        if st.button("Post"):
            create_post(user, content)
            st.success("Posted successfully")
        posts = get_all_posts()
        for p in posts:
            st.write(f"User: {p[0]}")
            st.write(f"Content: {p[1]}")
            st.write(f"Timestamp: {p[2]}")
            st.write("---")

elif choice == "Subscription":
    st.subheader("Manage Subscription")
    if 'username' not in st.session_state:
        st.error("Please login to manage subscription")
    else:
        user = st.session_state['username']
        if st.button("Create Subscription"):
            subscription_url = create_subscription(user)
            if subscription_url:
                st.success("Subscription created successfully")
                st.write(f"Go to the following URL to complete the payment: {subscription_url}")
            else:
                st.error("Error creating subscription")
        if st.button("Check Subscription Status"):
            if check_subscription(user):
                st.success("Subscription is active")
            else:
                st.error("Subscription is not active or does not exist")

conn.close()
